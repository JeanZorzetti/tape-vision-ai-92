# Docker Compose for Hybrid Trading System
# TypeScript Backend + Python ML Engine
version: '3.8'

services:
  # TypeScript Backend - Trading execution and APIs
  backend-ts:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: trading-backend-ts
    ports:
      - "3001:3001"
      - "8000:8000"  # API port
    environment:
      - NODE_ENV=production
      - ML_ENGINE_URL=http://ml-engine:8001
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongo:27017/trading
    volumes:
      - ./Backend/config:/app/config:ro
      - ./Backend/logs:/app/logs
    depends_on:
      - redis
      - mongo
      - ml-engine
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python ML Engine - AI/ML processing
  ml-engine:
    build:
      context: ./MLEngine
      dockerfile: Dockerfile
    container_name: trading-ml-engine
    ports:
      - "8001:8001"
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - BACKEND_URL=http://backend-ts:8000
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo:27017
      - LOG_LEVEL=INFO
      - CONFIDENCE_THRESHOLD=0.90
      - MODEL_PATH=/app/models/saved_models
    volumes:
      - ./MLEngine/models:/app/models
      - ./MLEngine/logs:/app/logs
      - ./MLEngine/data:/app/data
    depends_on:
      - redis
      - mongo
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - React UI
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: trading-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:3001
    depends_on:
      - backend-ts
    networks:
      - trading-network
    restart: unless-stopped

  # Redis - Caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - Data storage
  mongo:
    image: mongo:7
    container_name: trading-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=trading
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=trading123
    volumes:
      - mongo-data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus & Grafana (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=trading123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - trading-network
    restart: unless-stopped

  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend-ts
      - ml-engine
      - frontend
    networks:
      - trading-network
    restart: unless-stopped

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  mongo-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local